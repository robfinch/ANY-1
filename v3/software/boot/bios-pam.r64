; ============================================================================
;        __
;   \\__/ o\    (C) 2020-2021  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

	code	19 bits
;------------------------------------------------------------------------------
; PAM
; 0 = unallocated
; 1 = reserved
; 2 = end of run of pages
; 3 = allocated
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; PAMFindRun
;    Find a run of unallocated pages.
;
; Parameters:
;   $a0 = number of consecutive pages required
; Returns:
;   $a0 = page starting run, -1 if not enough memory
;   $cr0 = N set if not enough memory
;------------------------------------------------------------------------------
  align 16
PAMFindRun:
  sub 	$sp,$sp,#80
  sto		$ra,[$sp]
  sto   $s1,16[$sp]
  sto   $s2,32[$sp]
  sto   $s3,48[$sp]
  sto   $s4,64[$sp]
  mov   $s1,$a0             ; save argument value
  stt   $a0,$4010
  ldi   $a0,#OSPAGES
.nextPage:
  mov   $s4,$a0
  bal   $x1,PAMGetbitPair
  bne   $x0,$a0,.notAvailable
  mov   $s3,$s4             ; remember start of run
  mov   $s2,$s1             ; $s2 = run length
.runInc:
  sub  	$s2,$s2,#1
  beq   $x0,$s2,.foundRun
  add   $a0,$s4,#1          ; increment run start
  slt   $x2,$a0,#MEMSZ
  beq   $x0,$x2,.outOfMem
  mov   $s4,$a0             ; remember $a0
  stt   $s4,$4020
  bal		$x1,PAMGetbitPair
  beq   $x0,$a0,.runInc
  add   $a0,$s3,#1          ; increment run start pos
  bra   .nextPage
.notAvailable:
  add   $a0,$s4,#1
  slt   $x2,$a0,#MEMSZ
  bne   $x0,$x2,.nextPage
.outOfMem:
  ldi	  $a0,#-1
  bra   .xit
.foundRun:
  mov  	$a0,$s3
.xit
	ldo		$ra,[$sp]
  ldo   $s1,16[$sp]
  ldo   $s2,32[$sp]
  ldo   $s3,48[$sp]
  ldo   $s4,64[$sp]
  add   $sp,$sp,#80
  ret

;------------------------------------------------------------------------------
; Find a run of pages and mark them all allocated.
;
; Parameters:
;   $a0 = amount of memory to allocate
; Returns:
;   $a0 = pointer to memory, -1 if insufficient memory
;   $cr0 = N flag set if insufficient memory
;------------------------------------------------------------------------------
  align 16
_PAMAlloc:
  sub 	$sp,$sp,#64
  sto		$ra,[$sp]
  sto   $s1,16[$sp]
  sto   $s4,32[$sp]
  sto   $s5,48[$sp]
  beq   $a0,$x0,.outOfMem           ; request sensible?
  add   $t0,$a0,#PAGESZ-1   ; round allocation up
  srl   $a0,$t0,#LOG_PGSZ   ; convert size to pages
  mov   $s4,$a0             ; $s4 = length of run in pages
  ldt   $t0,NPAGES          ; check number of pages of memory available
  sub  	$t0,$t0,$a0
  blt		$t0,$x0,.outOfMem
  stt   $t0,NPAGES          ; update the number of available pages
  bal   $x1,PAMFindRun
  blt		$a0,$x0,.xit
  mov   $s1,$a0
  mov   $a3,$a0
  mov   $s5,$a0             ; $s5 = start of run
.markNext:
  mov   $a0,$a3
  slt   $a1,$s4,#2          ; if $s4 <= 1
  xor   $a1,$a1,#3          ; $a1 = 3, 2 if end of run
  bal  	$x1,PAMSetbitPair
  add   $a3,$a3,#1          ; increment page number
  sub   $s4,$s4,#1          ; decrement length
  bgt		$s4,$x0,.markNext
  mov   $a0,$s5             ; $a0 = start of run
  sll  	$a0,$a0,#LOG_PGSZ   ; $a0 = physical address of page
.xit:
	ldo		$ra,[$sp]
  ldo   $s1,16[$sp]
  ldo   $s4,32[$sp]
  ldo   $s5,48[$sp]
  add   $sp,$sp,#64
  ret
.outOfMem:
  ldi  	$a0,#-1
  jmp   .xit

;------------------------------------------------------------------------------
; Free memory previously allocated with PAMAlloc.
;
; Parameters:
;   $a0 = pointer to start of memory
; Modifies:
;   $a0,$t0,$t1,$t2,$t3,$t4
; Returns:
;   none
;------------------------------------------------------------------------------
  align 16
_PAMFree:
  sub   	$sp,$sp,#32
  sto			$ra,[$sp]
  sto     $s1,16[$sp]
  mov     $s1,$a0
  and    	$a0,$a0,#$F8007FFE  ; check page 16kB aligned
  bne			$a0,$x0,.xit
  srl     $a0,$s1,#LOG_PGSZ   ; convert to page number
  ldi     $t4,#1
.nextPage:
  mov     $s1,$a0
  bal    	$x1,PAMGetbitPair
  beq			$a0,$x0,.endOfRun
  slt     $t0,$a0,#3
  bne			$t0,$x0,.lastPage
  mov     $a0,$s1
  ldi     $a1,#0
  bal    	$x1,PAMSetbitPair
  add     $s1,$a0,#1
  add     $t4,$t4,#1
  bra     .nextPage  
.lastPage:
  mov     $a0,$s1
  ldi     $a1,#0
  bal     $x1,PAMSetbitPair
  add     $t4,$t4,#1
.endOfRun:
  ldt     $a1,NPAGES
  add     $a1,$a1,$t4
  stt     $a1,NPAGES
.xit:
	ldo			$ra,[$sp]
  ldo     $s1,16[$sp]
  add     $sp,$sp,#32
  ret

;------------------------------------------------------------------------------
; Allocate a single page of memory. Available memory is indicated by a bitmmap
; called the PAM for page allocation map.
;
; Modifies:
;		$t0,$t1,$t2,$t3
; Returns:
;		$a0 = page allocated
;   $cr0 = Z flag if can not allocate
;------------------------------------------------------------------------------
  align 16
_PAMMarkPage:
	sub		$sp,$sp,#32
	sto		$ra,[$sp]
	sto   $s1,16[$sp]
	ldi   $a0,#OSPAGES
  mov   $s1,$a0
.0001:
  mov   $a0,$s1
	bal   $x1,PAMGetbitPair
	beq   $a0,$x0,.gotFree
	add   $s1,$s1,#1
	slt   $t0,$s1,#MEMSZ
	bne		$t0,$x0,.0001
	ldi  	$a0,#0
	bra   .xit
.gotFree:
  mov  	$a0,$s1
  ldi   $a1,#2          ; end of run bits
  bal  	$x1,PAMSetbitPair
.xit:
	ldo		$ra,[$sp]
	ldo   $s1,16[$sp]
	add   $sp,$sp,#32
  ret

;------------------------------------------------------------------------------
; Parameters:
;		$a0 = page number to free
; Modifies:
;		$a1,$t0,$t1,$t2,$t3
;------------------------------------------------------------------------------
  align   16
PAMUnmarkPage:
	sgeu    $t0,$a0,#MEMSZ-1   ; last page is permanently allocated to system stack
	sltu 		$t1,$a0,#OSPAGES
	or			$t0,$t0,$t1
	bne	    $t0,$x0,PAMxit			    ; first 64 pages (64kB) allocated permanently to system
	ldi     $a1,#0
; Tail recursion here
;------------------------------------------------------------------------------
; Parameters:
;		$a0 = bit number to set
;   $a1 = value to set 0,1,2 or 3
; Does not modify:
;   $a0, $a1
; Modifies:
;		$t0,$t1,$t2,$t3
;------------------------------------------------------------------------------

;  align   4                 ; Minimum alignment for target address of a call
PAMSetbitPair:
  srl   $t2,$a0,#5          ; t2 = word
  sll   $t2,$t2,#4          ; t2 = word index
  and   $t3,$a0,#31         ; t3 = bit pair no
  sll   $t3,$t3,#1          ; t3 = bit pair index
	ldo		$t1,PAM[$t2]        ; get word
	sll		$a1,$a1,$t3					; shift $a1 into position
	ldi		$t4,#~3							; mask off bits in $t1
	rol		$t4,$t4,$t3
	and		$t1,$t1,$t4
	or		$t1,$t1,$a1
	;dep   $t1,$a1,$t3,#1
	sto		$t1,PAM[$t2]        ; store word
	srl		$a1,$a1,$t3					; restore $a1
PAMxit:
	ret

;------------------------------------------------------------------------------
; Parameters:
;		$a0 = bit number to get
; Modifies:
;		$t0,$t2,$t3
; Returns:
;   $a0 = value of bit (0, 1, 2, or 3)
;   $cr0 = Z flag set if bit = 0
;------------------------------------------------------------------------------
  align 16
PAMGetbitPair:
  srl   $t2,$a0,#5          ; $t2 = word
  sll   $t2,$t2,#4          ; $t2 = word index
  and   $t3,$a0,#31         ; $t3 = bit pair no
  sll   $t3,$t3,#1          ; $t3 = bit pair index
	ldo		$t0,PAM[$t2]        ; get word
	srl		$a0,$t0,$t3
	and		$a0,$a0,#3
;	extu 	$a0,$t0,$t3,#1     	; extract bits (0, 1, 2, or 3)
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
  align 16
_PAMInit:
	sub		$sp,$sp,#16
	sto		$ra,[$sp]
  ; First zero out the entire PAM using word stores
  ldi   $a0,#0
.0002:
  sto   $x0,PAM[$a0]
  add   $a0,$a0,#16
  slt   $t0,$a0,#65536      ; 131072 bit pair = 32,768 bytes
  bne  	$t0,$x0,.0002

  ; Now set bits for preallocated memory pages
  ldi   $a0,#OSPAGES-1  ; OS pages
  ldi   $a1,#3
.0001:
  bal  	$x1,PAMSetbitPair
  sub   $a0,$a0,#1
  bge		$a0,$x0,.0001
  ldi   $a0,#OSPAGES-1  ; Last OS page
  ldi   $a1,#2          ; set mark end of run
  bal  	$x1,PAMSetbitPair
  ldi   $a1,#2          ; end of run
  ldi   $a0,#MEMSZ-1    ; OS stack page
  bal  	$x1,PAMSetbitPair
  ldi   $a0,#MEMSZ-2    ; OS stack page
  ldi   $a1,#3          ; mid run
  bal  	$x1,PAMSetbitPair
  ldi   $a0,#MEMSZ-3    ; OS stack page
  bal  	$x1,PAMSetbitPair
  ldi   $a0,#MEMSZ-4    ; OS stack page
  bal  	$x1,PAMSetbitPair
  ldo		$ra,[$sp]
  add		$sp,$sp,#16
  ret

  align 16
GetPamBit:
	sub		$sp,$sp,#16
	sto		$ra,[$sp]
  mov   $a0,$a1
  bal  	$x1,PAMGetbitPair
  mov   $a1,$a0
  ldi   $a0,#E_Ok
  ldo		$ra,[$sp]
  add		$sp,$sp,#16
  bra   OSExit
