.include "../fmtk/const.r64"
.include "../fmtk/types.r64"
.include "../fmtk/config.r64"
.include "../fmtk/device.r64"
.include "../fmtk/macro.r64"
.include "../fmtk/globals.r64"

TEST  equ   1

CTRLC				equ		$03
CTRLT       equ   $14
BS					equ		$08
LNFD  			equ		$0A
CR					equ		$0D
XON					equ		$11
XOFF				equ		$13
EOF         equ   $1A
DEL					equ		$7F
VIA					equ		$FFFFFFFFFF910000*2
VIA_PA			equ		$04
VIA_DDRA		equ		$0C
VIA_T1CL		equ		$10
VIA_T1CH		equ		$14
VIA_T2CL    equ   $20
VIA_T2CH    equ   $24
VIA_ACR			equ		$2C
VIA_PCR			equ		$30
VIA_IFR			equ		$34
VIA_IER			equ		$38
VIA_PARAW		equ		$3C
UART				equ		$FFFFFFFFFF930000*2
UART_TRB		equ		$00
UART_STAT		equ		$04
UART_CMD		equ		$08

CSR_UIE     	equ   $004
CSR_DCAUSE		equ		$4006
CSR_DSCRATCH	equ		$4041
FLT_WD				equ		$36

ROMBASE		equ		$FFFFFFFFFFFC0000*2
IOBASE		equ		$FFFFFFFFFF800000*2
TEXTSCR		equ		$FFFFFFFFFF800000*2
KEYBD		equ		$FFFFFFFFFF8E0000*2
LEDS		equ			$FFFFFFFFFF910000*2
xbLEDS		equ			$FFFFFFFFFBDC0600*2
xbBridge1 equ   $FFFFFFFFFFDCF010*2
BUTTONS		equ		$FFFFFFFFFF910000*2
SCRATCHPAD	equ		$FFFFFFFFFF400000*2
SCRATCHMEM	equ		$FFFFFFFFFF400000*2
_DBGAttr  equ   SCRATCHMEM
;DBGATTR   equ   $0000FFFF000F0000   ; white on blue, priority $40
DBGATTR   equ   %000000_111111111111111111111_000001100000110111111_0000000000000000
_cursorX  equ   _DBGAttr + 8
_cursorY  equ   _cursorX + 1


	code	18 bits
;------------------------------------------------------------------------------
; Exception vector table.
;------------------------------------------------------------------------------
{+
	org		ROMBASE				; user mode exception
	bra		DBGRout
	org 	ROMBASE+$60*2				; machine mode exception
	bra		DBGRout
	org 	ROMBASE+$80*2				; debug mode exception
	bra		DBGRout
	org		ROMBASE+$F2*2			; non-maskable interrupt
	bra		MachineStart    ; cannot use a jump here, takes too much room

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
	org		ROMBASE+$100*2
	bra		IRQRout
	org 	ROMBASE+$1C0*2		; machine mode exception
	bra		IRQRout
	org		ROMBASE+$1F2*2		; non-maskable interrupt
	bra		MachineStart    ; cannot use a jump here, takes too much room

	org		ROMBASE+$200*2
	bra		IRQRout
	org 	ROMBASE+$2C0*2		; machine mode exception
	bra		IRQRout
	org		ROMBASE+$2F2*2		; non-maskable interrupt
	bra		MachineStart    ; cannot use a jump here, takes too much room

;------------------------------------------------------------------------------
; Reset starting address.
;------------------------------------------------------------------------------
	org		ROMBASE+$300*2
MachineStart:
;  ldi   $t1,#$81
;  sto   $t1,xbBridge1
  ldi   $t0,#$AA
  ldi   $a0,#$AA
	ldi		$x29,#SCRATCHMEM
	stm		[$x29],#%111111111111111111111111111111
  stb   $t0,LEDS
  stb   $a0,LEDS
	ldm		[$x29],#%111111111111111111111111111111

	ldi		$sp,#SCRATCHMEM+$CDF8*2		  ; setup debug mode stack pointer
	sub 	$sp,$sp,#16
	ldi		$t0,#SCRATCHMEM+$8000*2
	csrrw	$x0,#CSR_DTCBPTR,$t0				; set TCB pointer
	ldi   $a0,#10
	ldi   $a1,#0
	bal   $x1,_Delay2s
	bal   $x1,dbg_HomeCursor
	ldi		$a1,#DBGATTR		  ; set zorder $40, white text, blue background
	sto		$a1,_DBGAttr
  ; clear debug screen
  ldo   $a0,_DBGAttr
  ldi   $t0,#TEXTSCR
ifdef TEST
  ldi   $t1,#6
else
  ldi   $t1,#56*29
endif
.0001:
  sub   $t1,$t1,#1
  sto   $a0,[$t0+$t1*16]
  bne   $t1,$x0,.0001
	ldi		$a1,#DBGATTR|$41
	sto		$a1,TEXTSCR
	sto		$a1,TEXTSCR+8*2
	sto		$a1,TEXTSCR+16*2
	sto		$a1,TEXTSCR+24*2

;  ldi   $a0,#msgStart
  ;call  PutHexTetra
  ldi   $a0,#msgStart
  bal   $x1,PutString

;  call  _ramtest2
;	csrrs $x0,#CSR_TRACECTRL,#1 ; turn on tracing
  bal   $x1,_pti_init
  ldi   $a1,#$80000
  ldi   $a0,#$200000
  bal   $x1,_pti_read_block

	bal   $x1,MMUInit					; initialize MMU for address space zero.
	bal   $x1,_FMTKInit
	;call  ViaSetup
;	call  _SerialInit
	bal   $x1,_InitPIC
	ldi   $t0,#5          ; set current input and output to serial port
	stb   $t0,CURIN
	stb   $t0,CUROUT
	ldi		$t0,#0
	csrrw $x0,#CSR_MSEMA,$t0  ; turn off semaphores
	csrrw	$x0,#$181,$t0		    ; set ASID
	csrrw $x0,#CSR_TASKID,$t0 ; clear task id
	ldi		$t0,#$FFFFFFFFFFFC0000*2
	csrrw $x0,#$4034,$t0		; set tvec for debug mode
	ldi		$t0,#$FFFFFFFFFFFC0200*2
	csrrw $x0,#$4033,$t0		; set tvec for machine mode
	ldi		$t0,#UserStart
	csrrw	$x0,#$4048,$t0	  ; set mepc
	sto   $t0,MEPC1
  ldi   $a0,#1            ; start task
  ldi   $a1,#0
  ldi   $a2,#0
  ldi   $a3,#UserStart2
  ldi   $a4,#$00
  bal   $x1,OSOCall
  csrrw $x0,#CSR_TASKID,$a1
  csrrs $x0,#CSR_PMSTACK,#16 ; enable interrupts on return
	csrrc $x0,#CSR_TRACECTRL,#0 ; turn off tracing
	rte                       ; switch to user mode
;------------------------------------------------------------------------------
; User mode code staret here
; First thing to do is start a task so that the startup code may run on the
; first task switch.
;------------------------------------------------------------------------------
;  align 	code
UserStart:
  call  DumpTraceQueue
  wai                   ; wait for task switch
UserStart2:
  ldi   $a0,#12         ; start app
  ldi   $a1,#SystemASR
  brk   #240
.appBad:
  bne   $a0,#0,.appBad
  mov   $s1,$a1
  ldi   $a0,#14         ; get current tid
  brk   #240            ; $a1 = task id
  ldi   $a0,#30         ; set task's app id
  mov   $a2,$s1         ; $a2 = app id
  brk   #240

  mov   $s1,$a1         ; s1 = app id
	ldi		$sp,#$A0080000*2-8*2  ; setup user mode stack pointer

  ldi   $a0,#12         ; start app
  ldi   $a1,#TinyBasicASR
  brk   #240
	ldi		$a0,#1          ; Start finalizer task, task #1
	mov   $a1,$s1
	ldi		$a2,#0
	ldi		$a3,#Finalizer
	ldi   $a4,#$0B        ; user mode, regset 11
	brk   #240
	ldi		$a0,#1          ; Start task for monitor, task #2
	mov   $a1,$s1
	ldi		$a2,#0
	ldi		$a3,#MonEntry
	ldi   $a4,#$0A        ; user mode, regset 10
	brk   #240
  ldi   $a0,#25         ; map OS vars
  brk   #240
  mov   $gp,$a1

UserStart3:
	ldi		$sp,#$A0080000*2-8*2  	; setup user mode stack pointer
	ldi		$a0,#24							; RequestIOFocus
	mov   $a1,$s1
	brk   #240
;	ldi		$sp,#$70000		      ; setup temporary user mode stack pointer
;	mov   $a0,$a1             ; $a0 = tid
;	call AllocStack
;	add   $sp,$v1,#1020       ; place stack pointer at top of allocated region
	ldi		$t0,#$08						; turn on the LED
	stt		$t0,VIA+VIA_PARAW
	ldi		$t2,#16							; send an XON just in case
	ldi		$a3,#XON
.0004:
	bal   $x1,Putch ;SerialPutChar
	sub		$t2,$t2,#1
	bne	  $t2,#0,.0004
.0002:
;  ldi   $a0,#25             ; Map OS vars
;  brk #240
;  mov   $gp,$a1
  ; Request that the idle task announce itself.
;  ldi   $a0,#9              ; SendMsg
;  ldwu  $a1,IdleTaskMbx[$gp]
;  beqz  $a1,.noMbx
;  ldi   $a2,#MT_ANNOUNCE
;  ldi   $a3,#0
;  ldi   $a4,#0
;  brk #240
.noMbx:
	ldi		$a0,#msgStart				; spit out a startup message
	bal   $x1,PutString
;		ldi		a0,#1
;		ldi		a1,#24000
;		ldi		a2,#Monitor
;		brk #240
	bal   $x1,DumpReadyQueue
	bra		MonEntry

		; Now a loop to recieve and echo back characters
.0003:
;	ldi		$a0,#26							; FMTK_IO
;	ldi   $a1,#5
;	ldi		$a2,#9							; peekchar function
;	brk #240
;	mov   $v0,$v1
;	bltz	$v1,.0003
;	ldi		$a0,#26							; FMTK_IO
;	ldi   $a1,#5
;	ldi		$a2,#8							; getchar function
;	brk #240
;	mov		$a3,$v1
;	mov   $a0,$a3
;	call PutHexByte
;	bra		.0003

;------------------------------------------------------------------------------
; This task runs only if nothing else can run. It must run at the machine
; operating mode.
; Search for ready tasks and add them back into the ready queue.
;------------------------------------------------------------------------------
;  align 	code
IdleTask:
  ldi   $a0,#6                ; alloc mailbox
  ldi   $a1,#0                ; app #0
  brk   #240
  stw   $a1,IdleTaskMbx[$gp]  ; save mailbox handle off
.loop2:
  ldi   $t0,#$4000
  ldi   $t1,#1
.loop:
  ldi   $a0,#11               ; PeekMsg
  ldwu  $a1,IdleTaskMbx[$gp]
  ldi   $a2,#IdleTaskMsgD1
  ldi   $a3,#IdleTaskMsgD2
  ldi   $a4,#IdleTaskMsgD3
  ldi   $a5,#1                ; remove from queue if present
;  brk #240
;  bnez  $a0,.noMsg
;  ldt   $a0,IdleTaskMsgD1
;  xor   $t1,$a0,#MT_ANNOUNCE
;  bnez  $t1,.noAnnounce
;  ldi   $a0,#msgIdleAnnounce
;  call PutString
.noAnnounce:
.noMsg:
  ldi   $a0,#17               ; run as OS
  ldi   $a1,#.IdleCode
  mov   $a2,$t0
  brk   #240
  add   $t0,$t0,#PAGESZ
  sne   $t3,$t0,#MEMSZ*PAGESZ
  bne   $t3,#0,.loop
	bra		.loop2
  ; This section of code runs as part of the OS
  ; Don't callany functions though as there's no stack available
.IdleCode:
  ldt   $t0,OBJMagic[$a2]
  sne   $t3,$t0,#TCB_MAGIC
  bne   $t3,#0,.nxtObj
  ldbu  $t3,TCBStatus[$t2]    ; get status
  and  	$t3,$t3,#TS_READY
  bne   $t3,#0,.nxtObj
  ; The task was ready, but not found in the ready queue. So add it
  srl   $a0,$a2,#LOG_PGSZ
  mDI
  mInsertIntoReadyQueue
  mEI
.nxtObj:
  ldi   $a0,#E_Ok
  bra   OSExit

	align	1
msgIdleAnnounce:
  db  "Idle task running.",CR,0

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
;  align 	code
	align		16
_Delay2s:
ifdef TEST
  ldi     $a1,#10
else
	ldi			$a1,#3000000
endif
.0001:
	srl			$a2,$a1,#16
	stb			$a2,LEDS
	sub 		$a1,$a1,#1
	bgeu	  $a1,#1,.0001
	ret

;------------------------------------------------------------------------------
; Get a character from input device. Checks for a CTRL-T which indicates to
; switch the I/O focus.
;
; Parameters:
;		none
; Returns:
;		$a0 = character, -1 if none available
;------------------------------------------------------------------------------
	align		16
Getch:
	sub		$sp,$sp,#16
	sto		$x1,[$sp]
	sto		$a1,8[$sp]
	ldi   $a1,#5  ;CURIN
	bal		$x1,fgetc
	ldo		$a1,8[$sp]
	ldo		$x1,[$sp]
	add   $sp,$sp,#16
	ret

;------------------------------------------------------------------------------
; Parameters:
;   $a0 = character to put
;------------------------------------------------------------------------------
  ; align cache
_putch:
  bra   dbg_Putch
	align		16
Putch:
  bra   dbg_Putch
	sub		$sp,$sp,#24
	sto		$x1,[$sp]
	sto		$a3,8[$sp]
	sto		$a1,16[$sp]
	mov		$a3,$a0
	ldi		$a1,#5  ;CUROUT    ; serial port
	bal		$x1,fputc
	ldo		$x1,[$sp]
	ldo		$a3,8[$sp]
	ldo		$a1,16[$sp]
	add   $sp,$sp,#24
	ret

	align		16
calcScreenPos:
  ldbu  $t0,_cursorY
  bgeu  $t3,#29,.0001
.0002:
  mulf  $t1,$t0,#56*2
  ldbu  $t0,_cursorX
  bgeu  $t0,#56,.0003
.0004:
  add   $t1,$t1,$t0
  sll   $t1,$t1,#4			; 16 nybbles
  add   $t2,$t1,#TEXTSCR
  ret
; This is cool in ANY1. Storing a smalll constant to memory does not require
; the use of a source register. This allows the LDI and the STB to proceed
; in parallel. The store does not need to wait for a register.
.0001:
  ldi   $t0,#28
  stb   #28,_cursorY
  bra   .0002
.0003:
  ldi   $t0,#55
  stb   $t0,_cursorX
  bra   .0004

	align		16
incScreenPos:
  ldbu  $t0,_cursorX
  add   $t0,$t0,#1
  bltu  $t0,#56,.0001
  stb   #0,_cursorX
  ldbu  $t0,_cursorY
  add   $t0,$t0,#1
  bltu  $t0,#29,.0002
  sub		$sp,$sp,#8
  sto		$x1,[$sp]
  bal		$x1,dbg_ScrollUp
  ldo		$x1,[$sp]
  add		$sp,$sp,#8
  ret
.0002:
  stb   $t0,_cursorY
  ret
.0001:
  stb   $t0,_cursorX
  ret
  
	align		16
dbg_Putch:
	sub		$sp,$sp,#8
	sto		$x1,[$sp]
  beq  	$a0,#CR,.cr
  beq  	$a0,#LNFD,.lf
  ldo   $t3,_DBGAttr
  or    $t3,$a0,$t3
  bal		$x1,calcScreenPos
  sto   $t3,[$t2]
  bal		$x1,incScreenPos
.xit:
  ldo		$x1,[$sp]
	add		$sp,$sp,#8
  ret
 .lf:
  stb   #0,_cursorX
  ldbu  $a0,_cursorY
  add   $a0,$a0,#1
  bgeu  $a0,#29,dbg_ScrollUp
  stb   $a0,_cursorY
  bra		.xit
.cr:
  stb   #0,_cursorX
  bra		.xit

	align		16
dbg_ScrollUp:
	sub		$sp,$sp,#8
	sto		$x1,[$sp]
  ldi   $t0,#TEXTSCR
ifdef TEST
  ldi   $t1,#6
else
  ldi   $t1,#56*28*2
endif
.0001:
  ldo   $t2,56*8*2[$t0]
  sub  	$t1,$t1,#1      ; placed here eliminates pipeline bubble
  sto   $t2,[$t0]
  add   $t0,$t0,#16
  bne   $t1,#0,.0001
  bal		$x1,dbg_BlankLastLine
  ldo		$x1,[$sp]
	add		$sp,$sp,#8
	ret

	align		16
dbg_BlankLastLine:
  ldi   $t0,#TEXTSCR+56*28*2
  ldi   $t1,#55*2
  ldi   $t2,_DBGAttr
  or    $t2,$t2,#' '
.0001:
  sto   $t2,[$t0+$t1*8]
  sub  	$t1,$t1,#2
  bgeu  $t1,#2,.0001
  ret

  ; align cache
dbg_HomeCursor:
  stb   #0,_cursorX
  stb   #0,_cursorY
  ret
  
;------------------------------------------------------------------------------
; fputc - put a character to an I/O device. If the task doesn't have the I/O
; focus then it is rescheduled, allowing another task to run.
;
; Stack Space:
;		6 words
; Register Usage:
;		a0 = FMTK_IO specify
;		a2 = device putchar function
; Parameters:
;		a1 = I/O channel
;		a3 = character to put
; Modifies:
;		none
; Returns:
;   EOF if error occurred, otherwise character to put
;------------------------------------------------------------------------------
  ; align cache
fputc:
	sub		$sp,$sp,#32
	sto		$x1,[$sp]
	sto		$a1,16[$sp]
	sto		$a2,24[$sp]
	seq   $t0,$a6,#'B'
	beq   $t0,#0,.noBypass
	bal		$x1,SerialPutChar
	bra   .xit
.noBypass:
	; If the device is a UI device there may be multiple owning jobs. It doesn't
	; do any good to check for ownership. Instead the I/O focus is checked to
	; see if it's present.
	bal		$x1,GetUIFlag
	bne   $a1,#0,.checkOwner
  ldo   $a1,16[$sp]
	bal		$x1,WaitForIOFocus
	bra   .0001
.checkOwner:
  bal		$x1,CheckDevOwner
  bne   $a0,#0,.notOwner
.0001:
  ldo   $a1,16[$sp]
	ldi		$a0,#26							; FMTK_IO
	ldi		$a2,#13							; putchar function
	brk   #240
	mov   $a0,$a3
.xit:
	ldo		$x1,[$sp]
	ldo		$a1,16[$sp]
	ldo		$a2,24[$sp]
	add   $sp,$sp,#32
	ret
.notOwner:
  ldi   $a0,#EOF
  bra   .xit
 
;------------------------------------------------------------------------------
; fgetc - get a character from an I/O device. If the task doesn't have the I/O
; focus then it is rescheduled, allowing another task to run.
;
; Stack Space:
;		4 words
; Register Usage:
;		a0 = FMTK_IO specify
;		a2 = device getchar function
; Parameters:
;		a1 = I/O channel
; Modifies:
;		none
; Returns:
;		a0 character, -1 if none available
;------------------------------------------------------------------------------
  ; align cache
fgetc:
	sub		$sp,$sp,#32
	sto		$x1,[$sp]
	sto		$a1,16[$sp]
	sto		$a2,24[$sp]
	bal		$x1,GetUIFlag
	beq   $a1,#0,.checkOwner
	ldt		$a1,16[$sp]
	bal		$x1,WaitForIOFocus
	bra   .0001
.checkOwner:
	ldt		$a1,16[$sp]
  bal		$x1,CheckDevOwner
  bne   $a0,#0,.notOwner
.0001:
	ldi		$a0,#26							; FMTK_IO
	ldt		$a1,16[$sp]
	ldi		$a2,#8							; getchar function
	brk   #240
	mov   $a0,$a1
.0002:
	ldo		$x1,[$sp]
	ldo		$a1,16[$sp]
	ldo		$a2,24[$sp]
	add   $sp,$sp,#32
	ret
.notOwner:
  ldi   $a0,#-1
  bra   .0002

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
  ; align cache
MonEntry:
;		flw			$f2,fltTen
;		fsw			$f2,f2Save
;		flw			$f1,fltTen
;		fsw			$f1,f1Save
;		fadd		$f18,$f2,$f1
;		fsw			$f18,f18Save
		ldi		$a0,#10
		ldi		$a2,#6
;		call	fltToString
;		ldi		$a0,#STRTMP
;		call	PutString

  ; align cache
Monitor:
.getFocus:
;	ldi   $a0,#20       ; has IO focus
;	brk #240
;	bnez  $v1,.hasFocus
;	ldi   $a0,#21       ; switch focus
;	brk #240
;	bra   .getFocus
.hasFocus:
;		call	DumpReadyList
;		call	DumpTimeoutList
	ldi		  $s1,#0					; s1 = input pointer
	ldi			$a0,#msgPrompt
	bal   	$x1,PutString
.0001:
	bal   	$x1,Getch						; wait until character pressed
	blt	    $a0,#0,.0001	; test return value
	beq			$a0,#LNFD,.procLine	; process line feed
	beq			$a0,#CR,.procLine	; and carriage return
	beq	    $a0,#BS,.doBackspace
	ldi			$t0,#DEL
	beq		  $a0,$t0,.doDelete
	stb		  $a0,INBUF[$s1]
	add		  $s1,$s1,#2
	bal  		$x1,Putch
	bra		  .0001
.doDelete:
	mov		  $s2,$s1
	add		  $s2,$s2,#2
.0002:
	ldb		  $t0,INBUF[$s2]
	stb		  $t0,INBUF-2[$s2]
	add		  $s2,$s2,#2
	add		  $t0,$s2,#INBUF
	slt		  $t1,$t0,#INBUF+$7F*2
	bne		  $t1,#0,.0002
	stb		  #0,INBUF[$s2]
	bra		  .0001
.doBackspace:
	beq		  $s1,#0,.0001    ; can't backspace anymore
	bal   	$x1,Putch       ; show the backspace
	sub		  $s1,$s1,#2
	mov		  $s2,$s1
.0003:
	ldb		  $t0,INBUF+2[$s2]
	stb		  $t0,INBUF[$s2]
	add		  $s2,$s2,#2
	add		  $t0,$s2,#INBUF
	slt		  $t1,$t0,#INBUF+$7F*2
	bne		  $t1,#0,.0003
	stb		  #0,INBUF[$s2]
	bra		  .0001
.procLine:
	stb		  #0,INBUF[$s1]
	ldi		  $s1,#0
.skip:
	ldb	  	$t0,INBUF[$s1]
	beq		  $t0,#0,.0005
	ldi			$t1,#'>'
	bne		  $t0,$t1,.0004
.skip2:
	add		  $s1,$s1,#2
	bra		  .skip
.0004:
	ldi			$t1,#' '
	beq			$t0,$t1,.skip2
	ldi			$t1,#'\t'
	beq			$t0,$t1,.skip2
	ldi			$t1,#'x'
	bne     $t0,$t1,.notX
	ldi     $a0,#E_Ok
	bra     OSExit
.notX:
	ldi			$t1,#'M'
	beq			$t0,$t1,doMem
	ldi			$t1,#'V'
	beq     $t0,$t1,doVMem
	ldi			$t1,#'P'
	beq     $t0,$t1,doPState
	ldi			$t1,#'B'
	beq		  $t0,$t1,.0006
	bal   	$x1,GetDecNum
	bne     $a0,#0,.basSize
	ldi     $a0,#32000
.basSize:
	ldi		  $a0,#12					; Start App
	ldi     $a1,#TBASR
	brk     #240
	mov		  $s1,$a1					; save v1
	bal   	$x1,PutCRLF
	mov		  $a0,$s1					; get back v1
	bal   	$x1,PutHexByte
	ldi		  $a0,#msgTaskStart
	bal   	$x1,PutString
	bal   	$x1,DumpReadyQueue
	; The monitor is running in machine mode. A return instruction is used to
	; switch to user mode. The return address must be set to the desired user
	; code address.
	mDI                     ; disable interrupts
	ldi     $t0,#CSTART       ; pick start of Tiny Basic
	csrrw   $x0,#$341,$t0     ; set as return address
	ldi     $t0,#$00011111    ; bits to select register set #1
	csrrw   $x0,#CSR_REGSET,$t0     ; select register set #1 (will decrement to zero then on mret)
	rte                     ; will begin running Tiny Basic in user mode
	;ldi		$a0,#5					; Reschedule task
	;ldi		$a1,#1					; sleep(0)
	;brk #240
	bra		  Monitor
.0006:
	ldi			$t1,#'D'
	bne		  $t0,$t1,.0007
	ldb		  $t0,INBUF+2[$s1]
	ldi			$t1,#'T'
	bne		  $t0,$t1,.noT
	bal   	$x1,DumpTimeoutList
	bra		  Monitor
.noT:
	bal   	$x1,DumpReadyQueue
	;ldi		$a0,#15
	;brk #240
	bra		  Monitor
.0007:
	ldi			$t1,#'E'
	beq		  $t0,$t1,EditMem
	ldi			$t1,#'F'
	bne		  $t0,$t1,.0009
	ldb     $t0,INBUF+2[$s1]
	ldi			$t1,#'I'
	bne			$t0,$t1,.notFind
	add     $s1,$s1,#2
	bra     Find
.notFind:
	bra		  FillMem
.0009:
	ldi			$t1,#'S'
	bne		  $t0,$t1,.0010
	ldi		  $a0,#5					; sleep(0)
	ldi		  $a1,#1
	brk     #240
	bra		  Monitor
.0010:
	ldi			$t1,#'K'
	bne		  $t0,$t1,.0011
	bal     $x1,GetHexNum
	mov		  $a1,$a0					; a0 = pid
	ldi		  $a0,#3					; kill task
	brk     #240
	bra		  Monitor
.0011:
	ldi			$t1,#'?'
	bne		  $t0,$t1,.0012
	ldi		  $a0,#msgMonHelp
	bal    	$x1,PutString
	bra		  Monitor
.0012:
.0005:
	bra		  Monitor

  ; align cache
doMem:
	sub		$sp,$sp,#8
	add		$s1,$s1,#2
	ldb		$t0,INBUF[$s1]
	sne   $t0,#'O'
	bt    .0001
	add		$s1,$s1,#2
.0001:
	sto		$s1,[$sp]
	ldi		$a0,#CR
	bal   $x1,Putch
	ldi		$a0,#INBUF
	bal   $x1,PutString
	ldo		$s1,[$sp]
	add		$sp,$sp,#8
	bal   $x1,GetHexNum
	mov		$s3,$a0
	mov   $s5,$a0
	add		$s1,$s1,#2
	bal   $x1,GetHexNum
	add		$s4,$a0,$s3
.loop2:
	bal   $x1,Getch						; check for ctrl-c
	beq		$a0,#3,Monitor
	ldi		$a0,#CR
	bal   $x1,Putch
	mov		$a0,$s3
	bal   $x1,PutHexWord
	ldi		$a0,#':'
	bal   $x1,Putch
	ldi		$s2,#7
.loop:
	ldi		$a0,#' '
	bal   $x1,Putch
	bne   $t0,$x0,.userMem
	ldi   $a0,#33         ; Fetch memory word
	mov   $a1,$s3
	brk   #240
	mov   $a0,$a1
	bra   .0002
.userMem
	ldb		$a0,[$s3]
.0002:
	bal   $x1,PutHexByte
	add		$s3,$s3,#2
	sub		$s2,$s2,#1
	bge		$s2,$x0,.loop
	bltu  $s3,$s4,loop2
;	call  PutInlineString
;	db    ' ',' ',0
	mov   $s3,$s5
.0004:
	ldbu  $a0,[$s3]
	bltu  $a0,#$20,.unprintable
	bal   $x1,Putch
	bra   .0003
.unprintable:
  ldi   $a0,#'.'
  bal   $x1,Putch
.0003:
  add   $s3,$s3,#2
  bltu  $s3,$s4,.0004
  ldi   $a0,#CR
  bal   $x1,Putch
	bra		Monitor		

  ; align cache
EditMem:
;	csrrs $x0,#CSR_UIE,#1        ; enable gc interrupt
	bal   $x1,GetHexNum			; get address to edit
	mov		$s3,$a0
	add		$s1,$s1,#2
	bal   $x1,GetHexNum			; get value to set
	stb		$s3,[$a0]			; update mem
	bra		Monitor

;------------------------------------------------------------------------------
; >V 0
; Displays the virtual memory map for the specified app.
;------------------------------------------------------------------------------

  ; align cache
doVMem:
  add   $s1,$s1,#1
  bal   $x1,GetDecNum
  ldi   $t1,#0
  sll   $t0,$a0,#16
.0001:
  and.  $a0,$t1,#3
  bne   .notLF
  bal   $x1,PutCRLF
.notLF:
  mov   $a0,$t0
  bal   $x1,PutHexWord
  ldi   $a0,#':'
  bal   $x1,Putch
  mvmap $a0,$x0,$t0
  bal   $x1,PutHexHalf
  ldi   $a0,#' '
  bal   $x1,Putch
  add   $t0,$t0,#1
  add   $t1,$t1,#1
  slt   $t1,#256
  bt    .0001
  bra   Monitor

;------------------------------------------------------------------------------
; >P
; Display the PAM bits status.
;------------------------------------------------------------------------------

  ; align cache
doPStat:
  bal   $x1,PutCRLF
  ldi   $t1,#0        ; $a1 = bit number
.0001:
  ldi   $a0,#32       ; Get PAM bit pair
  brk   #240
  add   $a0,$a1,#'0'
  bal   $x1,Putch
  add   $t1,$t1,#1
  slt   $a0,$t1,#MEMSZ
  bne   $a0,#0,.0001
  bra   Monitor
 
;------------------------------------------------------------------------------
;	>F 1000 800 EE
; Fills memory beginning at address $1000 for $800 bytes with the value $EE
;------------------------------------------------------------------------------

  ; align cache
FillMem:
	bal   $x1,GetHexNum			; get address
	mov		$s3,$a0
	add		$s1,$s1,#2
	bal   $x1,GetHexNum			; get length
	mov		$s4,$a0
	add		$s1,$s1,#2
	bal   $x1,GetHexNum			; get byte to use
.0001:
	sub		$s4,$s4,#2
	stb		$a0,[$s3+$s4]
	bgeu	$s4,#2,.0001
	bra		Monitor

;------------------------------------------------------------------------------
; FI Hello
;------------------------------------------------------------------------------

  ; align cache
Find:
  bal   $x1,PutCRLF
  bal   $x1,SkipSpaces
  mov   $s2,$s1
.fwe:
  ldbu  $t0,INBUF[$s2]
  seq		$t1,$t0,#' '
  seq		$t2,$t0,#CR
  or		$t1,$t1,$t2
  bne		$t1,$x0,.endOfWord
  add   $s2,$s2,#2
  bra   .fwe
.endOfWord:
  stb   $x0,INBUF[$s2]
  mov   $s2,$s1
  ldi   $a0,#0
  ldi   $a1,#0
.loop:
	bal		$x1,Getch						; check for ctrl-c
	beq	  $a0,#3,Monitor
.0001:
  ldbu  $t0,[$a0]
  ldbu 	$t1,INBUF[$s2]
  beq   $t1,$x0,.found
  seq   $t1,$t0,$t1
  beq   $t1,$x0,.next
  add   $a0,$a0,#2
  add   $s2,$s2,#2
  bra   .loop
.next:
  mov   $s2,$s1         ; start over again with $s2
  add   $a0,$a1,#2      ; start over again with $a0, but increment by one byte
  ldi   $t2,#$80000     ; 512k
  mov   $a1,$a0         ; remember new starting pos.
  slt   $t1,$a0,$t2
  bne   $t1,$t0,.loop
  bra   .notFound
.found:
  bal   $x1,PutHexTetra
  bal   $x1,PutCRLF
  bra   .next
.notFound:
  bal   $x1,PutCRLF
  bra   Monitor

;------------------------------------------------------------------------------
; Skip over spaces and tabs in the input buffer.
;------------------------------------------------------------------------------

  ; align cache
SkipSpaces:
.skip2:
	ldb		  $t0,INBUF[$s1]
	seq		  $t1,$t0,#' '  ; space or
	seq			$t2,$t0,#'\t'	; tab
	or			$t1,$t1,$t2
	beq			$t1,$x0,.done
	add 		$s1,$s1,#2
	bra	  	.skip2
.done
  ret

;------------------------------------------------------------------------------
; Get a hex number from the input buffer.
;------------------------------------------------------------------------------

  ; align cache
GetHexNum:
	sub		$sp,$sp,#8
	sto		$x1,[$sp]
	ldi		$a0,#0							; a0 = num
	bal   $x1,SkipSpaces
.next:
	ldb		$t0,INBUF[$s1]
	bltu	$t0,#'0',.0001
	bltu	$t0,#'9'+1,.isDigit
	bltu	$t0,#'A',.0001
	bltu	$t0,#'F'+1,.isHexUpper
	ldi		$t1,#'a'
	bltu	$t0,$t1,.0001
	ldi		$t1,#'f'+1
	bltu	$t0,$t1,.isHexLower
.0001:
	ldo		$x1,[$sp]
	add		$sp,$sp,#8
	ret
.isHexUpper:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'A'
	add		$t0,$t0,#10
	or		$a0,$a0,$t0
	add		$s1,$s1,#2
	bra		.next
.isHexLower:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'a'
	add		$t0,$t0,#10
	or		$a0,$a0,$t0
	add		$s1,$s1,#2
	bra		.next
.isDigit:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'0'
	or		$a0,$a0,$t0
	add		$s1,$s1,#2
	bra		.next

;------------------------------------------------------------------------------
; Get a decimal number from the input buffer.
;------------------------------------------------------------------------------
  ; align cache
GetDecNum:
	sub			$sp,$sp,#8
	sto			$x1,[$sp]
	ldi			$a0,#0							; a0 = num
	bal 	  $x1,SkipSpaces
.next:
	ldb		  $t0,INBUF[$s1]
	bltu		$t0,#'0',.0001
	bltu		$t0,#'9'+1,.isDigit
.0001:
	ldo			$x1,[$sp]
	add			$sp,$sp,#8
	ret
.isDigit:
	; mulf is not used to allow the number to be larger than 40 bits
	sll		$t2,$a0,#1    ; multiply by 10
	sll   $a0,$a0,#3    ; * 8
	add   $a0,$a0,$t2   ; + *2
	sub		$t0,$t0,#'0'
	add		$a0,$a0,$t0
	add		$s1,$s1,#2
	bra		.next

;------------------------------------------------------------------------------
; Output an octabyte as a hex string.
;
; Parameters:
;   a0 = contains octabyte value to output
; Registers Affected:
;   none
; Returns:
;   none
;------------------------------------------------------------------------------
  ; align cache
PutHexOcta:
	sub		$sp,$sp,#8
	sto		$x1,[$sp]
	ror		$a0,$a0,#32
	bal		$x1,PutHexTetra
	rol   $a0,$a0,#32
	ldo		$x1,[$sp]
	add		$sp,$sp,#8

;------------------------------------------------------------------------------
; Output a word as a hex string.
;
; Parameters:
;   a0 = contains word to output
; Registers Affected:
;   none
; Returns:
;   none
;------------------------------------------------------------------------------

  ; align cache
PutHexTetra:
	sub		$sp,$sp,#8
	sto		$x1,[$sp]
	ror		$a0,$a0,#16
	bal		$x1,PutHexWyde
	rol		$a0,$a0,#16
	ldo		$x1,[$sp]
	add		$sp,$sp,#8

;------------------------------------------------------------------------------
; Output a half-word (16 bits) as a hex string.
;------------------------------------------------------------------------------

  ; align cache
PutHexWyde:
	sub		$sp,$sp,#8
	sto		$x1,[$sp]
	ror		$a0,$a0,#8
	bal		$x1,PutHexByte
	rol		$a0,$a0,#8
	ldo		$x1,[$sp]
	add		$sp,$sp,#8

;------------------------------------------------------------------------------
; Output a byte as a hex string.
;------------------------------------------------------------------------------

  ; align cache
PutHexByte:
	sub		$sp,$sp,#8
	sto		$x1,[$sp]
	ror		$a0,$a0,#4		; put the high order nybble first
	bal		$x1,PutHexNybble
	rol		$a0,$a0,#4		; restore a0
	ldo		$x1,[$sp]
	add		$sp,$sp,#8

;------------------------------------------------------------------------------
; Output a nybble as a hex string.
;
; Parameters:
;   a0 = contains nybble to output
; Registers Affected:
;   none
; Returns:
;   none
;------------------------------------------------------------------------------

  ; align cache
PutHexNybble:
	sub		$sp,$sp,#24
	sto		$a0,0[$sp]
	sto   $t0,8[$sp]
	sto		$x1,16[$sp]
	and		$a0,$a0,#15		; strip off high order bits
	blt		$a0,#10,.lt10
	sub		$a0,$a0,#10
	add		$a0,$a0,#'A'-'0'
.lt10:
	add		$a0,$a0,#'0'
	bal		$x1,Putch
.0001:
	ldo		$a0,0[$sp]
	ldo   $t0,8[$sp]
	ldo		$x1,16[$sp]
	add   $sp,$sp,#24
	ret

;------------------------------------------------------------------------------
; PutInlineString
;   Put a string of characters to output device. The string parameter is
; located as an inline parameter.
;------------------------------------------------------------------------------

PutInlineStringCA:				; chunk addressing
  ldo   $t1,[$sp]         ; pop return address
  sub		$sp,$sp,#16				; make room for save area
	sto		$a0,[$sp]				  ; save a0
	sto		$s1,8[$sp]				; and s1
	sto		$s2,16[$sp]
	mov		$s1,$t1						; s1 = pointer to string
	mov		$s2,$t1						; s2 = pointer to string
.0001:
	ldb		$a0,[$s1]
	add		$s1,$s1,#2				; advance pointer to next byte
	beq 	$a0,#0,.done      ; branch if done
	call	Putch							; output character, assume $tx destroyed
	bra		.0001
.done:
	sub		$s2,$s1,$s2				; get count of nybbles
	rem		$s2,$s2,#9				; figure mod 9
	beq		$s2,#0,.remz
	subf	$s2,$s2,#9				; number of nybbles to add 9-mod
.remz:
	add		$t1,$s1,$s2				; $t1 = return address
	ldo		$a0,[$sp]				  ; restore a0
	ldo		$s1,8[$sp]				; restore $s1,$s2
	ldo		$s2,16[$sp]
	add   $sp,$sp,#24				; pop save area and return address
  jmp   [$t1]

PutInlineString:
  ldo   $t1,[$sp]         ; pop return address
  sub		$sp,$sp,#8				; make room for save area
	sto		$a0,[$sp]				  ; save a0
	sto		$s1,8[$sp]				; and s1
	mov		$s1,$t1						; s1 = pointer to string
.0001:
	ldb		$a0,[$s1]
	add		$s1,$s1,#2				; advance pointer to next byte
	beq 	$a0,#0,.done      ; branch if done
	call	Putch							; output character, assume $tx destroyed
	bra		.0001
.done:
	mov		$t1,$s1						; $t1 = return address
	ldo		$a0,[$sp]				  ; restore a0
	ldo		$s1,8[$sp]				; restore $s1
	add   $sp,$sp,#16				; pop save area and return address
  jmp   [$t1]

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

PutCRLF:
	sub		$sp,$sp,#8
	sto		$x1,[$sp]
	ldi		$a0,#CR
	bal		$x1,Putch
	ldi		$a0,#LNFD
	bal		$x1,Putch
	ldo		$x1,[$sp]
	add		$sp,$sp,#8
	ret

;------------------------------------------------------------------------------
; PutString
;    Put a string of characters to the serial transmitter. Calls the 
; Putch routine, so this routine also blocks if the transmitter is not
; empty.
;
; Parameters:
;		$a0 = pointer to null terminated string to put
; Modifies:
;		$t0,$t1,$t2,$t3
; Stack Space:
;		2 words
;------------------------------------------------------------------------------
  ; align cache
PutString:
	sub		$sp,$sp,#24
	sto		$a0,[$sp]				  ; save argument
	sto   $s1,8[$sp]        ; and reg var
	sto		$x1,16[$sp]
	mov		$s1,$a0						; t1 = pointer to string
.0001:
	ldb		$a0,[$s1]
	add		$s1,$s1,#2				; advance pointer to next byte
	beq 	$a0,#0,.done     	; branch if done
	bal		$x1,Putch							; output character
	bra		.0001
.done:
	ldo		$a0,[$sp]				  ; restore argument
	ldo   $s1,8[$sp]
	ldo		$x1,16[$sp]
	add   $sp,$sp,#24
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

  ; align cache
DumpTraceQueue:
	ldi     $a6,#'X'        ; bypass='B' in fputc routine
.dmpTrace:
	ldi     $a0,#CR
	bal			$x1,Putch
	ldi     $a1,#14         ; processor trace queue status
	peekq  	$a0,$a1
	blt     $a0,$x0,.dmpTraceEmpty  ; emptied out?
	ldi     $a1,#15         ; processor trace queue data
	popq   	$a0,$a1
	bal			$x1,PutHexOcta
	bra     .dmpTrace
.dmpTraceEmpty:
	ldi     $a0,#CR
	bal			$x1,Putch
.inf:
  bra     .inf
  ret

;------------------------------------------------------------------------------
; Exception processing code staret here.
; As per the RISCV privilege spec, the MSB indicates an external interrupt.
; The system uses cause codes 32 to 63 for external devices. This cause code
; range is reserved in the RISCV spec.
;
; On incoming the register file has been set to the interrupt register file
; or the machine mode register file.
;------------------------------------------------------------------------------
  align 16
; Top of stack for different register sets
StackTbl:
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $7F400-4
  dw    $7F800-4
  dw    $7FC00-4
  dw    $80000-4

	code
	align	16
IRQRout:
	csrrw	$t0,#CSR_DCAUSE,$x0		; get cause code
	blt	  $t0,$x0,.isIRQ	      ; irq or brk #240?
	beq		$t0,#2,.unimp					; unimplemented instruction?
	and   $t2,$t0,#-4
	beq		$t2,#8,.brk
	; Some other cause
.unimp:
  sto   $t0,$4018
	csrrc $x0,#CSR_TRACECTRL,#1 ; turn off tracing
	ldi   $t0,#DumpTraceQueue
	csrrw $x0,#CSR_MEPC,$t0
	bra		DBGxit
.soc:
  jmp   .soc
.brk:
  ; We reset the stack pointer at each callto the OS in case an error causes
  ; it to be messed up.
  csrrw $t0,#CSR_PMSTACK,$x0   ; get operating mode
  and   $t0,$t0,#14       ; extract register set selection (will be 13,14, or 15)
  sll   $t2,$t0,#3        ; $t2 = table index
	ldo		$sp,StackTbl[$t2]	; setup machine mode stack pointer
	jmp		OSECALL					  ; goto operating system calldispatcher
.isIRQ:
  csrrw $t0,#CSR_PMSTACK,$x0   ; get operating mode
  and   $t0,$t0,#14       ; extract register set selection (will be 13,14, or 15)
  sll   $t2,$t0,#3        ; $t2 = table index
	ldo		$sp,StackTbl[$t2]	; setup machine mode stack pointer
	csrrw	$t0,#CSR_DCAUSE,$x0			; get cause code

  ldt   $t1,IRQFlag     ; update IRQ flag for Tiny Basic
  add   $t1,$t1,#1
  stt   $t1,IRQFlag
  and   $t0,$t0,#$FF
  stt   $t0,IRQCause    ; update cause code for Tiny Basic
  sub  	$t1,$t0,#1
  beq   $t1,$x0,.softwareIrq
  sub  	$t1,$t1,#1
  beq   $t1,$x0,.timerIrq
  sub  	$t1,$t1,#1      ; garbage collect interrupt?
  beq   $t1,$x0,.gcIrq
	and		$t4,$t0,#31			; interrupting device # is low order 5 bits of cause code
	ldi   $t3,#5          ; try 5 times
.devAgain:
	mov   $t5,$t4
	sll		$t5,$t5,#8				; 128 bytes per device func table
	add		$t5,$t5,#DVF_Base+22*8	; load IRQ routine vector from device func table
	ldo		$t5,[$t5]
	beq	  $t5,$x0,.noIRQ	    ; make sure there's an address to go to
	jmp		[$t5]						; jump to the IRQ routine
.noIRQ:
  sub  	$t3,$t3,#1
  bne   $t3,$x0,.InitDev
.softwareIrq:
.timerIrq:
  jmp   DBGxit							; ERETx2
	; The device function tables may have been zeroed out, try initializing them.
	; The following uses $a0-$a1, $t0-$t2
.InitDev:
	bne		$t4,#5,.notSerial
	ldi		$a0,#5							; serial device
	ldi		$a1,#SerialFuncTbl
	bal	  $x1,CopyDevFuncTbl
	ldi		$a0,#5							; serial device
	ldi   $a1,#SerialDCB
	bal   $x1,CopyDevDCB
	bra   .devAgain
.notSerial:
	bne		$t4,#15,.notVia		; VIA device?
	ldi		$a1,#ViaFuncTbl
	bal	  $x1,CopyDevFuncTbl
	ldi		$a0,#15							; VIA device
	ldi		$a1,#ViaDCB
	bal	  $x1,CopyDevDCB
	bra   .devAgain
.notVia:
  bra   DBGxit					; ERETx2
.gcIrq:
;	ldi		$sp,#$7F800-4		; setup interrupt mode stack pointer
  bal 	$x1,gcIncrement
  bra		DBGxit
ERETx2:
;  mDI
;  csrrc $x0,#$7C0,#31   ; select machine regs only
;  csrrw $t0,#$7C0,$x0   ; get register sets
;  srl   $t0,$t0,#5      ; extract register set selection
;  sll   $t0,$t0,#3
;  ldt   $t1,MEPC0[$t0]  ; get it
;  csrrw $x0,#$341,$t1   ; set mepc
  mDI
  nop
  nop
  csrrw $t0,#CSR_RSSTACK,$x0   ; get register sets
  and   $t0,$t0,#15       ; extract register set selection (will be 13,14, or 15)
  asl   $t2,$t0,#2        ; $t2 = table index
	ldt		$sp,StackTbl[$t2]	; setup machine mode stack pointer
	rte

	; In case the pipeline runs ahead into the following table which will
	; result in illegal instructions.
	nop
	nop
  nop

  ; align cache
DBGRout:
	csrrw	$x0,#CSR_DSCRATCH,$x30		; save x30 inscratch
	csrrd	$x30,#CSR_DTCBPTR					; get pointer to TCB
	stm		16[$x30],#%011111111111111111111111111111	; save registers
	csrrd	$t0,#CSR_DSCRATCH					; get back original x30
	sto		$t0,480[$x30]							; and save it too
	; Free up some working registers
;	sto		$x1,16[$x29]
;	sto		$x2,32[$x29]
;	sto		$x3,48[$x29]
;	sto		$x4,64[$x29]
;	sto		$x5,80[$x29]
;	sto		$x6,96[$x29]
;	sto		$x7,112[$x29]
;	sto		$x8,128[$x29]
;	sto		$x9,144[$x29]
;	sto		$x10,160[$x29]
;	sto		$x11,176[$x29]
;	sto		$x12,192[$x29]
;	sto		$x13,208[$x29]
;	sto		$x14,224[$x29]
;	sto		$x15,240[$x29]
;	sto		$x16,256[$x29]
;	sto		$x17,272[$x29]
;	sto		$x18,288[$x29]
;	sto   $x19,304[$x29]
;	sto		$x20,320[$x29]
;	sto		$x21,336[$x29]
;	sto		$x22,352[$x29]
;	sto		$x23,368[$x29]
;	sto		$x24,384[$x29]
;	sto		$x25,400[$x29]
;	sto		$x26,416[$x29]
;	sto		$x27,432[$x29]
;	sto		$x28,448[$x29]
;	sto		$x30,480[$x29]
	csrrd	$x1,#CSR_DCAUSE
	seq		$x2,$x1,#FLT_WD
	bne		$x2,$x0,DBGxit
  bra		IRQRout
  rex   #3,$x0
DBGxit:
	csrrd	$x30,#CSR_DTCBPTR
	ldm		16[$x30],#%111111111111111111111111111111
;	ldo		$x1,16[$x29]
;	ldo		$x2,32[$x29]
;	ldo		$x3,48[$x29]
;	ldo		$x4,64[$x29]
;	ldo		$x5,80[$x29]
;	ldo		$x6,96[$x29]
;	ldo		$x7,112[$x29]
;	ldo		$x8,128[$x29]
;	ldo		$x9,144[$x29]
;	ldo		$x10,160[$x29]
;	ldo		$x11,176[$x29]
;	ldo		$x12,192[$x29]
;	ldo		$x13,208[$x29]
;	ldo		$x14,224[$x29]
;	ldo		$x15,240[$x29]
;	ldo		$x16,256[$x29]
;	ldo		$x17,272[$x29]
;	ldo		$x18,288[$x29]
;	ldo   $x19,304[$x29]
;	ldo		$x20,320[$x29]
;	ldo		$x21,336[$x29]
;	ldo		$x22,352[$x29]
;	ldo		$x23,368[$x29]
;	ldo		$x24,384[$x29]
;	ldo		$x25,400[$x29]
;	ldo		$x26,416[$x29]
;	ldo		$x27,432[$x29]
;	ldo		$x28,448[$x29]
;	ldo		$x30,480[$x29]
  rte
	nop
	nop
  nop
END_OF_BOOT:

	rodata
	align	2
; Application startup record for system
SystemASR:
  db    0     ; page size (can't change on this system)
  db    2     ; priority normal
  db    12    ; register set for startup task
  db    0     ; memory map #0
  dw    0     ; processor affinity
  dw    0     ; code size (0 = in ROM, don't move)
  dw    0     ; reserved
  dw    0     ; data size (preinitialized data)
  dw    0     ; reserved
  dw    0     ; uninitialized data size
  dw    0     ; reserved
  dw    0     ; Heap size
  dw    0     ; reserved
  dw    1024  ; stack size
  dw    0     ; reserved
  dw    IdleTask  ; pointer to code
  dw    0       ; reserved
  dw    0     ; pointer to data
  dw    0     ; reserved
  dw    0     ; ui data
  dw    0     ; reserved

; Application startup record for Tiny Basic
TinyBasicASR:
  db    0     ; page size (can't change on this system)
  db    2     ; priority normal
  db    0     ; register set
  db    1     ; memory map
  dw    0     ; processor affinity
  dw    0     ; code size (0 = in ROM, don't move)
  dw    0     ; reserved
  dw    0     ; data size (preinitialized data)
  dw    0     ; reserved
  dw    32768 ; uninitialized data size
  dw    0     ; reserved
  dw    0     ; Heap size
  dw    0     ; reserved
  dw    2048  ; stack size
  dw    0     ; reserved
  dw    CSTART  ; pointer to code
  dw    0       ; reserved
  dw    0     ; pointer to data
  dw    0     ; reserved
  dw    0     ; ui data
  dw    0     ; reserved
    
;------------------------------------------------------------------------------
; Message strings
;------------------------------------------------------------------------------

msgStart:
		db		"Femtiki System Starting.",10
msgMonHelp:
		db		"Monitor Commands",10
		db		"B - start tiny basic",10
		db		"D - dump ready que",10
		db		"E - edit memory",10
		db		"F - fill memory",10
		db    "FI <string>- find string in memory",10
		db		"K <tid> - kill task", 10
		db		"M <start> <length>	- dump memory",10
		db    "P - display PAM",10
		db		"S - switch task",10
		db    "V <mid> dump virtual memory map",10
		db		0
		; align cache
msgTaskStart:
		db		" task started."
msgCRLF:
		db		13,10,0
msgPrompt:
	db      CR,LNFD,'>',0
flt50:
	dw	0x00000000,0x00000000,0x00000000,0x40049000
flt20:
	dw	0x00000000,0x00000000,0x00000000,0x40034000
flt10:
	dw	0x00000000,0x00000000,0x00000000,0x40024000

;.include "fltToString.r64"
;.include "bios-mem.r64"
.include "bios-pam.r64"
;.include "bios-tlb.r64"
;.include "ramtest.r64"

;.include "../fmtk/msg.r64"
;.include "../fmtk/tcb.r64"
;.include "../fmtk/task.r64"
;.include "../fmtk/io.r64"
;.include "../fmtk/iofocus.r64"
;.include "../fmtk/serial.r64"
;.include "../fmtk/source/drivers/pti_driver.r64"
;.include "../fmtk/app.r64"
;.include "../fmtk/Finalizer.r64"
;.include "../fmtk/gcIncremental.r64"
;.include "../fmtk/source/kernel/fmtk.r64"
;.include "../fmtk/source/kernel/FMTKc.r64"
;.include "../fmtk/source/kernel/SetupDevices.r64"
;.include "../fmtk/source/kernel/pic.r64"
;.include "../fmtk/source/kernel/DBGConsole.r64"
;.include "../fmtk/source/fmtk.l64"
;.include "../fmtk/finalizer.r64"
;.include "../fmtk/gcIncremental.r64"
;.include "TinyBasic.r64"
;.include "../cc64libc/source/rtf64/io.r64"
;.include "../cc64libc/source/cc64libc.l64"
;.include "../c_standard_lib-master/c_standard_lib-master/c_standard_lib.l64"
